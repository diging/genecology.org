# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-03-15 18:29
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
from django.conf import settings

from blog.schema import *


def load_cidoc_crm(apps, schema_editor):
    import_schema('http://www.cidoc-crm.org/rdfs/cidoc_crm_v6.0-draft-2015January.rdfs', 'CIDOC CRM 6.0')


def delete_cidoc_crm(apps, schema_editor):
    RDFSchema = apps.get_model("blog", "RDFSchema")
    RDFClass = apps.get_model("blog", "RDFClass")
    RDFProperty = apps.get_model("blog", "RDFProperty")

    RDFProperty.objects.all().delete()
    RDFClass.objects.all().delete()
    RDFSchema.objects.all().delete()


def generate_entities(apps, schema_editor):
    Entity = apps.get_model("blog", "Entity")
    RDFClass = apps.get_model("blog", "RDFClass")
    Concept = apps.get_model("concepts", "Concept")
    Type = apps.get_model("concepts", "Type")

    for concept in Type.objects.all():
        Entity(concept=concept, instance_of=RDFClass.objects.get(identifier='E55_Type')).save()

    for concept in Concept.objects.all():
        try:
            concept.entity_instance
            continue
        except:
            pass

        if concept.typed:
            label_normed = concept.typed.label.lower().replace(' ', '_')
            rdf_class = RDFClass.objects.filter(identifier__icontains=label_normed).first()
            Entity(concept=concept, instance_of=rdf_class).save()
        else:
            Entity(concept=concept, instance_of=RDFClass.objects.get(identifier='E1_CRM_Entity')).save()


def ungenerate_entities(apps, schema_editor):
    Entity = apps.get_model("blog", "Entity")
    Property = apps.get_model("blog", "Property")
    Entity.objects.all().delete()
    Property.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('concepts', '0001_initial'),
        ('blog', '0012_auto_20160315_1732'),
    ]

    operations = [
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255)),
                ('concept', models.OneToOneField(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='entity_instance', to='concepts.Concept')),
                ('instance_of', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='blog.RDFClass')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='entities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'entities',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('concept', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='property_instance', to='concepts.Concept')),
                ('instance_of', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='blog.RDFProperty')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties_from', to='blog.Entity')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties_onto', to='blog.Entity')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(null=True, blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='properties', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'properties',
            },
        ),
        migrations.AddField(
            model_name='conceptprofile',
            name='instance_of',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.RDFClass'),
        ),
        migrations.AddField(
            model_name='contentrelation',
            name='instance_of',
            field=models.ForeignKey(blank=True, help_text="Each relation should have a formal type or property from a controlled vocabulary. If you don't see an appropriate option here, we chould consider loading additional vocabularies or, if absolutely necessary, creating our own.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_relations', to='blog.RDFProperty'),
        ),
        migrations.AddField(
            model_name='data',
            name='instance_of',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.RDFClass'),
        ),
        migrations.AddField(
            model_name='externalresource',
            name='instance_of',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.RDFClass'),
        ),
        migrations.AddField(
            model_name='image',
            name='instance_of',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.RDFClass'),
        ),
        migrations.AddField(
            model_name='note',
            name='instance_of',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.RDFClass'),
        ),
        migrations.AddField(
            model_name='post',
            name='instance_of',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.RDFClass'),
        ),
        migrations.AlterField(
            model_name='contentrelation',
            name='name',
            field=models.CharField(blank=True, help_text='Descriptive name for the relation. E.g. "elaborates on", "provides context for", "is related to".', max_length=1000, null=True),
        ),
        migrations.RunPython(
            load_cidoc_crm,
            delete_cidoc_crm
        ),
        migrations.RunPython(
            generate_entities,
            ungenerate_entities
        )
    ]
